{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Result Service \u00b6 The Result Service displays real-time voting results for the VotingTech voting application. Overview \u00b6 This service provides a real-time web interface built with Node.js and Express that: - Displays live voting results - Updates automatically as votes are cast - Provides a responsive, real-time dashboard - Connects to PostgreSQL for vote data Architecture \u00b6 The Result service is a Node.js Express application that: - Serves HTML pages for results visualization - Connects to PostgreSQL database for vote data - Uses WebSockets for real-time updates - Provides a clean, responsive interface Technology Stack \u00b6 Language : Node.js Framework : Express.js Database : PostgreSQL Real-time : WebSockets Frontend : HTML5, CSS3, JavaScript Containerization : Docker Quick Start \u00b6 Prerequisites \u00b6 Node.js 18+ and npm PostgreSQL database Docker (optional but recommended) Local Development \u00b6 Clone the repository 1 2 git clone https://github.com/muhmmadayan10/example-voting-app.git cd example-voting-app/result Install dependencies 1 npm install Set environment variables 1 2 3 4 5 export POSTGRES_HOST = localhost export POSTGRES_PORT = 5432 export POSTGRES_USER = postgres export POSTGRES_PASSWORD = password export POSTGRES_DB = votes Run the application 1 npm start The service will be available at http://localhost:4000 Docker Development \u00b6 1 2 3 4 docker build -t result-service . docker run -d -p 4000 :80 \\ -e POSTGRES_HOST = postgres \\ result-service Configuration \u00b6 Environment Variables \u00b6 Variable Description Default Required POSTGRES_HOST PostgreSQL server hostname localhost Yes POSTGRES_PORT PostgreSQL server port 5432 No POSTGRES_USER Database username postgres Yes POSTGRES_PASSWORD Database password - Yes POSTGRES_DB Database name votes Yes PORT Application port 80 No Features \u00b6 Real-time updates : Live vote count updates Responsive design : Works on desktop and mobile Error handling : Graceful database error handling Performance : Efficient polling for updates Visual appeal : Clean, modern interface Related Services \u00b6 This service is part of the VotingTech microservices ecosystem: Vote Service : Frontend for casting votes Worker Service : Processes votes from queue Seed Data Service : Initializes the database PostgreSQL : Persistent vote storage Redis : Message queue for vote processing Getting Help \u00b6 Issues : GitHub Issues Documentation : Available in Backstage TechDocs Team : Contact the Frontend Team via Slack","title":"Home"},{"location":"#result-service","text":"The Result Service displays real-time voting results for the VotingTech voting application.","title":"Result Service"},{"location":"#overview","text":"This service provides a real-time web interface built with Node.js and Express that: - Displays live voting results - Updates automatically as votes are cast - Provides a responsive, real-time dashboard - Connects to PostgreSQL for vote data","title":"Overview"},{"location":"#architecture","text":"The Result service is a Node.js Express application that: - Serves HTML pages for results visualization - Connects to PostgreSQL database for vote data - Uses WebSockets for real-time updates - Provides a clean, responsive interface","title":"Architecture"},{"location":"#technology-stack","text":"Language : Node.js Framework : Express.js Database : PostgreSQL Real-time : WebSockets Frontend : HTML5, CSS3, JavaScript Containerization : Docker","title":"Technology Stack"},{"location":"#quick-start","text":"","title":"Quick Start"},{"location":"#prerequisites","text":"Node.js 18+ and npm PostgreSQL database Docker (optional but recommended)","title":"Prerequisites"},{"location":"#local-development","text":"Clone the repository 1 2 git clone https://github.com/muhmmadayan10/example-voting-app.git cd example-voting-app/result Install dependencies 1 npm install Set environment variables 1 2 3 4 5 export POSTGRES_HOST = localhost export POSTGRES_PORT = 5432 export POSTGRES_USER = postgres export POSTGRES_PASSWORD = password export POSTGRES_DB = votes Run the application 1 npm start The service will be available at http://localhost:4000","title":"Local Development"},{"location":"#docker-development","text":"1 2 3 4 docker build -t result-service . docker run -d -p 4000 :80 \\ -e POSTGRES_HOST = postgres \\ result-service","title":"Docker Development"},{"location":"#configuration","text":"","title":"Configuration"},{"location":"#environment-variables","text":"Variable Description Default Required POSTGRES_HOST PostgreSQL server hostname localhost Yes POSTGRES_PORT PostgreSQL server port 5432 No POSTGRES_USER Database username postgres Yes POSTGRES_PASSWORD Database password - Yes POSTGRES_DB Database name votes Yes PORT Application port 80 No","title":"Environment Variables"},{"location":"#features","text":"Real-time updates : Live vote count updates Responsive design : Works on desktop and mobile Error handling : Graceful database error handling Performance : Efficient polling for updates Visual appeal : Clean, modern interface","title":"Features"},{"location":"#related-services","text":"This service is part of the VotingTech microservices ecosystem: Vote Service : Frontend for casting votes Worker Service : Processes votes from queue Seed Data Service : Initializes the database PostgreSQL : Persistent vote storage Redis : Message queue for vote processing","title":"Related Services"},{"location":"#getting-help","text":"Issues : GitHub Issues Documentation : Available in Backstage TechDocs Team : Contact the Frontend Team via Slack","title":"Getting Help"},{"location":"deployment/","text":"Deployment Guide \u00b6 Production Deployment \u00b6 Docker Deployment \u00b6 The Result Service can be deployed using Docker: 1 2 3 4 5 6 7 FROM node:16-alpine WORKDIR /app COPY package*.json ./ RUN npm ci --only = production COPY . . EXPOSE 4000 CMD [ \"node\" , \"server.js\" ] Environment Configuration \u00b6 Set these environment variables in production: 1 2 3 4 5 POSTGRES_HOST = your-postgres-host POSTGRES_DB = votes POSTGRES_USER = your-postgres-user POSTGRES_PASSWORD = your-postgres-password PORT = 4000 Kubernetes Deployment \u00b6 Example Kubernetes deployment: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 apiVersion : apps/v1 kind : Deployment metadata : name : result-service spec : replicas : 2 selector : matchLabels : app : result-service template : metadata : labels : app : result-service spec : containers : - name : result-service image : result-service:latest ports : - containerPort : 4000 env : - name : POSTGRES_HOST value : \"postgres-service\" - name : POSTGRES_DB value : \"votes\" Health Checks \u00b6 The service provides a health check endpoint: 1 GET /health Monitoring \u00b6 Monitor these metrics: - Response time - Database connection status - Memory usage - CPU usage","title":"Deployment"},{"location":"deployment/#deployment-guide","text":"","title":"Deployment Guide"},{"location":"deployment/#production-deployment","text":"","title":"Production Deployment"},{"location":"deployment/#docker-deployment","text":"The Result Service can be deployed using Docker: 1 2 3 4 5 6 7 FROM node:16-alpine WORKDIR /app COPY package*.json ./ RUN npm ci --only = production COPY . . EXPOSE 4000 CMD [ \"node\" , \"server.js\" ]","title":"Docker Deployment"},{"location":"deployment/#environment-configuration","text":"Set these environment variables in production: 1 2 3 4 5 POSTGRES_HOST = your-postgres-host POSTGRES_DB = votes POSTGRES_USER = your-postgres-user POSTGRES_PASSWORD = your-postgres-password PORT = 4000","title":"Environment Configuration"},{"location":"deployment/#kubernetes-deployment","text":"Example Kubernetes deployment: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 apiVersion : apps/v1 kind : Deployment metadata : name : result-service spec : replicas : 2 selector : matchLabels : app : result-service template : metadata : labels : app : result-service spec : containers : - name : result-service image : result-service:latest ports : - containerPort : 4000 env : - name : POSTGRES_HOST value : \"postgres-service\" - name : POSTGRES_DB value : \"votes\"","title":"Kubernetes Deployment"},{"location":"deployment/#health-checks","text":"The service provides a health check endpoint: 1 GET /health","title":"Health Checks"},{"location":"deployment/#monitoring","text":"Monitor these metrics: - Response time - Database connection status - Memory usage - CPU usage","title":"Monitoring"},{"location":"development/","text":"Development Guide \u00b6 Setting up the Result Service \u00b6 Prerequisites \u00b6 Node.js 16+ PostgreSQL database Environment variables configured Installation \u00b6 1 npm install Configuration \u00b6 Set the following environment variables: 1 2 3 4 POSTGRES_HOST = localhost POSTGRES_DB = votes POSTGRES_USER = postgres POSTGRES_PASSWORD = postgres Running in Development \u00b6 1 npm start The service will be available at http://localhost:4000 Development Workflow \u00b6 Make changes to the source code The application will automatically restart Check the logs for any errors Test the voting results display Database Schema \u00b6 The service expects a votes table with the following structure: 1 2 3 4 5 CREATE TABLE votes ( id SERIAL PRIMARY KEY , vote VARCHAR ( 255 ) NOT NULL , timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP );","title":"Development"},{"location":"development/#development-guide","text":"","title":"Development Guide"},{"location":"development/#setting-up-the-result-service","text":"","title":"Setting up the Result Service"},{"location":"development/#prerequisites","text":"Node.js 16+ PostgreSQL database Environment variables configured","title":"Prerequisites"},{"location":"development/#installation","text":"1 npm install","title":"Installation"},{"location":"development/#configuration","text":"Set the following environment variables: 1 2 3 4 POSTGRES_HOST = localhost POSTGRES_DB = votes POSTGRES_USER = postgres POSTGRES_PASSWORD = postgres","title":"Configuration"},{"location":"development/#running-in-development","text":"1 npm start The service will be available at http://localhost:4000","title":"Running in Development"},{"location":"development/#development-workflow","text":"Make changes to the source code The application will automatically restart Check the logs for any errors Test the voting results display","title":"Development Workflow"},{"location":"development/#database-schema","text":"The service expects a votes table with the following structure: 1 2 3 4 5 CREATE TABLE votes ( id SERIAL PRIMARY KEY , vote VARCHAR ( 255 ) NOT NULL , timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP );","title":"Database Schema"}]}